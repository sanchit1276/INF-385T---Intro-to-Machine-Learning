
# coding: utf-8

# In[1]:


from sklearn.datasets import load_iris

iris_data = load_iris()


# In[2]:


print(iris_data.DESCR)


# In[3]:


iris_data.keys()


# In[4]:


X = iris_data.data
y = iris_data.target


# In[5]:


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
print("Number samples in training: ", len(X_train))
print("Number samples in testing: ", len(X_test))


# In[6]:


from sklearn.tree import DecisionTreeClassifier

tree_giniIndex = DecisionTreeClassifier().fit(X_train, y_train)


# In[7]:


get_ipython().magic(u'matplotlib inline')
from sklearn import tree
import graphviz

dot_data = tree.export_graphviz(tree_giniIndex, out_file=None, feature_names=iris_data.feature_names, class_names=iris_data.target_names, filled=True, rounded=True) 
graph = graphviz.Source(dot_data) 
graph


# In[8]:


tree_giniIndexPruned = DecisionTreeClassifier(max_depth=2).fit(X_train, y_train)
dot_data = tree.export_graphviz(tree_giniIndexPruned, out_file=None, feature_names=iris_data.feature_names, class_names=iris_data.target_names, filled=True, rounded=True) 
graph = graphviz.Source(dot_data) 
graph


# In[9]:


tree_entropy = DecisionTreeClassifier(criterion="entropy").fit(X_train, y_train)

dot_data = tree.export_graphviz(tree_entropy, out_file=None, feature_names=iris_data.feature_names, class_names=iris_data.target_names, filled=True, rounded=True) 
graph = graphviz.Source(dot_data) 
graph


# In[10]:


treePredicted = tree_entropy.predict(X_test)


# In[11]:


from sklearn import metrics
print(metrics.classification_report(treePredicted, y_test))


# In[12]:


from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

get_ipython().magic(u'matplotlib inline')
mat = confusion_matrix(treePredicted, y_test)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('true label')
plt.ylabel('predicted label');


# In[13]:


from sklearn.naive_bayes import GaussianNB

gaussian_model = GaussianNB()
gaussian_model.fit(X_train, y_train)


# In[14]:


yPredicted = gaussian_model.predict(X_test)


# In[15]:


print(metrics.classification_report(yPredicted, y_test))


# In[16]:


mat = confusion_matrix(yPredicted, y_test)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('true label')
plt.ylabel('predicted label');

